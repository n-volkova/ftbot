const { Telegraf } = require('telegraf');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env') });
const { 
    isAllowedUser, 
    getUserName,
    isSupervisor,
    isDeveloper 
} = require('./users');
const { noClient, noPhoto } = require('./replies');
const { getReport } = require('./search');
const { logger } = require('./logger');

const bot = new Telegraf(process.env.BOT_TOKEN);
let userId;

bot.start(ctx => {
    try {
        userId = ctx.from.id;
        if (!isAllowedUser(userId) && !isDeveloper(userId)) {
            ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
            return;
        }
        if (isSupervisor(userId)) {
            ctx.reply('–ü—Ä–∏–≤–µ—Ç, —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä!\n–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\nüíé /report - –æ—Ç—á–µ—Ç –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞\nüíé /report{month} - –æ—Ç—á–µ—Ç –ø–æ –º–µ—Å—è—Ü—É —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /reportaug, /reportaugust –∏–ª–∏ /report8)\nüíé /report{month} - –æ—Ç—á–µ—Ç –ø–æ –º–µ—Å—è—Ü—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /reportoct_2023, /reportoctober_2023 –∏–ª–∏ /report10_2023)');
            return;
        }
        ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç—ã –ø–æ –§–¢.\n–ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–ª–µ–Ω–∞ –∫–ª—É–±–∞ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ InBody.\n–î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`);
    } catch (err) {
            logger.error(err);
        }
    });

bot.on('photo', async (ctx) => {
    try {
        if (isSupervisor(userId)) {
            ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.');
            return;
        }

        if (!ctx.message.caption) {
            noClient(ctx);
            return;
        }

        const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
        ctx.telegram.sendPhoto(process.env.STATS_CHANNEL_ID, fileId, { 
            caption: `–¢—Ä–µ–Ω–µ—Ä: ${getUserName(ctx.message.from.id)} (id: ${ctx.message.from.id})\n–ö–ª–∏–µ–Ω—Ç: ${ctx.message.caption}`
        }).then(() => {
            ctx.reply('–ü—Ä–∏–Ω—è—Ç–æ üëç');
        }).catch((err) => {
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            logger.error(err);
        });
    } catch (err) {
        logger.error(err);
    }
});

bot.on('text', async (ctx) => {
    const reportCommand = /\/report(?<month>[a-z]{3,9}|\d{1,2})?(_)?(?<year>20\d{2})?$/;
    const { month, year } = ctx.message.text.match(reportCommand)?.groups || {};
    const availableArgs = [undefined, 
        '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', 
        '01', '02', '03', '04', '05', '06', '07', '08', '09',
        'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec',
        'january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];
    if (month || ctx.message.text === '/report') {
        if (!isSupervisor || !isDeveloper) {
            ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
            return;
        }
        if (availableArgs.includes(month)) {
            try {
                let report = await getReport(month, parseInt(year));
                if (report) {
                    ctx.reply(report);
                }
            } catch (err) {
                logger.error(err);
            } finally {
                return;
            }
        } else {
            ctx.reply('–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ –∫–æ–º–∞–Ω–¥—ã');
            return;
        }
    }
    if (isSupervisor || isDeveloper) {
        ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.');
        return;
    }
    noPhoto(ctx);
});
    
bot.launch();
